pipeline {
  agent {
    docker {
      image 'blessing67/my-maven-docker-agent:latest'
      args '-v /var/run/docker.sock:/var/run/docker.sock --user root'
    }
  }
  options {
    skipDefaultCheckout() // disable automatic checkout so we can clean first
  }
  stages {
    stage('Clean Workspace') {
      steps {
        script {
          echo "Cleaning workspace on Jenkins node..."
          sh '''
            sudo chown -R jenkins:jenkins "$WORKSPACE" || true
            sudo chmod -R u+rw "$WORKSPACE" || true
            rm -rf "$WORKSPACE"/*
          '''
        }
      }
    }

    stage('Checkout') {
      steps {
        git branch: 'main', credentialsId: 'docker-cred', url: 'https://github.com/Mkhwanazi-B/Jenkins-Zero-To-Hero.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.51.174.95:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "blessing67/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "Mkhwanazi-B"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          dir("${env.WORKSPACE}") {
            sh '''
              git config user.email "blessing67mkhwanazi@gmail.com"
              git config user.name "Blessing Mkhwanazi"
              git reset --hard
              git clean -fd
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}" || true
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            '''
          }
        }
      }
    }
  }
}
