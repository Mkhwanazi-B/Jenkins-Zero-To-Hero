pipeline {
  agent none          // use per-stage agents

  options {
    skipDefaultCheckout()
  }

  stages {
    /* 1. Clean & clone */
    stage('Checkout Code') {
      agent {
        docker {
          image 'blessing67/my-maven-docker-agent:latest'
          args '-v /var/run/docker.sock:/var/run/docker.sock --user root'
        }
      }
      steps {
        script {
          echo 'Cleaning & cloning repository...'
          sh '''
            sudo chown -R jenkins:jenkins "$WORKSPACE" || true
            sudo chmod -R u+rw "$WORKSPACE" || true
            rm -rf "$WORKSPACE"/*
          '''
          git branch: 'main',
              credentialsId: 'github',
              url: 'https://github.com/Mkhwanazi-B/Jenkins-Zero-To-Hero.git'
        }
      }
    }

    /* 2. Build & test */
    stage('Build and Test') {
      agent {
        docker {
          image 'blessing67/my-maven-docker-agent:latest'
          args '-v /var/run/docker.sock:/var/run/docker.sock --user root'
        }
      }
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          sh 'mvn clean package'
        }
      }
    }

    /* 3. SonarQube */
    stage('Static Code Analysis') {
      agent {
        docker {
          image 'blessing67/my-maven-docker-agent:latest'
          args '-v /var/run/docker.sock:/var/run/docker.sock --user root'
        }
      }
      environment {
        SONAR_URL = 'http://13.51.174.95:9000'
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL'
          }
        }
      }
    }

    /* 4. Docker build & push */
    stage('Build and Push Docker Image') {
      agent {
        docker {
          image 'blessing67/my-maven-docker-agent:latest'
          args '-v /var/run/docker.sock:/var/run/docker.sock --user root'
        }
      }
      environment {
        DOCKER_IMAGE = "blessing67/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
              docker.image(DOCKER_IMAGE).push()
            }
          }
        }
      }
    }

    /* 5. GitOps commit (host side) */
    stage('Update Deployment File') {
      agent any        // runs on Jenkins host, keeps .git
      environment {
        GIT_REPO_NAME = 'Jenkins-Zero-To-Hero'
        GIT_USER_NAME = 'Mkhwanazi-B'
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          dir("${WORKSPACE}") {
            sh '''
              git config user.email "blessing67mkhwanazi@gmail.com"
              git config user.name  "Blessing Mkhwanazi"

              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" \
                java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git diff --cached --quiet || \
                git commit -m "Update deployment image to version ${BUILD_NUMBER}"

              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            '''
          }
        }
      }
    }
  }
}